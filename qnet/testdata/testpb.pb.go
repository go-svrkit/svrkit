// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: testpb.proto

package testdata

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BuildingStatus int32

const (
	BuildingStatus_Broken    BuildingStatus = 0
	BuildingStatus_Normal    BuildingStatus = 1
	BuildingStatus_Building  BuildingStatus = 2
	BuildingStatus_Upgrading BuildingStatus = 3
	BuildingStatus_Removed   BuildingStatus = 4
)

var BuildingStatus_name = map[int32]string{
	0: "Broken",
	1: "Normal",
	2: "Building",
	3: "Upgrading",
	4: "Removed",
}

var BuildingStatus_value = map[string]int32{
	"Broken":    0,
	"Normal":    1,
	"Building":  2,
	"Upgrading": 3,
	"Removed":   4,
}

func (x BuildingStatus) String() string {
	return proto.EnumName(BuildingStatus_name, int32(x))
}

func (BuildingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{0}
}

type BuildingType int32

const (
	BuildingType_Unknown      BuildingType = 0
	BuildingType_HeadQuarters BuildingType = 1
	BuildingType_Academy      BuildingType = 2
	BuildingType_Wall         BuildingType = 3
	BuildingType_WatchTower   BuildingType = 4
	BuildingType_Hospital     BuildingType = 5
)

var BuildingType_name = map[int32]string{
	0: "Unknown",
	1: "HeadQuarters",
	2: "Academy",
	3: "Wall",
	4: "WatchTower",
	5: "Hospital",
}

var BuildingType_value = map[string]int32{
	"Unknown":      0,
	"HeadQuarters": 1,
	"Academy":      2,
	"Wall":         3,
	"WatchTower":   4,
	"Hospital":     5,
}

func (x BuildingType) String() string {
	return proto.EnumName(BuildingType_name, int32(x))
}

func (BuildingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{1}
}

type Coord struct {
	X                    int32    `protobuf:"varint,1,opt,name=X,proto3" json:"X,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=Y,proto3" json:"Y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coord) Reset()         { *m = Coord{} }
func (m *Coord) String() string { return proto.CompactTextString(m) }
func (*Coord) ProtoMessage()    {}
func (*Coord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{0}
}
func (m *Coord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coord.Merge(m, src)
}
func (m *Coord) XXX_Size() int {
	return m.Size()
}
func (m *Coord) XXX_DiscardUnknown() {
	xxx_messageInfo_Coord.DiscardUnknown(m)
}

var xxx_messageInfo_Coord proto.InternalMessageInfo

func (m *Coord) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Coord) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type BuildingInfo struct {
	Id                   int32          `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type                 BuildingType   `protobuf:"varint,2,opt,name=Type,proto3,enum=testdata.BuildingType" json:"Type,omitempty"`
	Status               BuildingStatus `protobuf:"varint,3,opt,name=Status,proto3,enum=testdata.BuildingStatus" json:"Status,omitempty"`
	Level                int32          `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	PosX                 int32          `protobuf:"varint,5,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY                 int32          `protobuf:"varint,7,opt,name=PosY,proto3" json:"PosY,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BuildingInfo) Reset()         { *m = BuildingInfo{} }
func (m *BuildingInfo) String() string { return proto.CompactTextString(m) }
func (*BuildingInfo) ProtoMessage()    {}
func (*BuildingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{1}
}
func (m *BuildingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildingInfo.Merge(m, src)
}
func (m *BuildingInfo) XXX_Size() int {
	return m.Size()
}
func (m *BuildingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildingInfo proto.InternalMessageInfo

func (m *BuildingInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BuildingInfo) GetType() BuildingType {
	if m != nil {
		return m.Type
	}
	return BuildingType_Unknown
}

func (m *BuildingInfo) GetStatus() BuildingStatus {
	if m != nil {
		return m.Status
	}
	return BuildingStatus_Broken
}

func (m *BuildingInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BuildingInfo) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *BuildingInfo) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

type BuildActionInfo struct {
	BuilderID            int32    `protobuf:"varint,1,opt,name=BuilderID,proto3" json:"BuilderID,omitempty"`
	MoveTime             int64    `protobuf:"varint,2,opt,name=MoveTime,proto3" json:"MoveTime,omitempty"`
	FromPos              *Coord   `protobuf:"bytes,3,opt,name=FromPos,proto3" json:"FromPos,omitempty"`
	TargetPos            *Coord   `protobuf:"bytes,4,opt,name=TargetPos,proto3" json:"TargetPos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildActionInfo) Reset()         { *m = BuildActionInfo{} }
func (m *BuildActionInfo) String() string { return proto.CompactTextString(m) }
func (*BuildActionInfo) ProtoMessage()    {}
func (*BuildActionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{2}
}
func (m *BuildActionInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildActionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildActionInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildActionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildActionInfo.Merge(m, src)
}
func (m *BuildActionInfo) XXX_Size() int {
	return m.Size()
}
func (m *BuildActionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildActionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BuildActionInfo proto.InternalMessageInfo

func (m *BuildActionInfo) GetBuilderID() int32 {
	if m != nil {
		return m.BuilderID
	}
	return 0
}

func (m *BuildActionInfo) GetMoveTime() int64 {
	if m != nil {
		return m.MoveTime
	}
	return 0
}

func (m *BuildActionInfo) GetFromPos() *Coord {
	if m != nil {
		return m.FromPos
	}
	return nil
}

func (m *BuildActionInfo) GetTargetPos() *Coord {
	if m != nil {
		return m.TargetPos
	}
	return nil
}

type BuildReq struct {
	Type                 BuildingType     `protobuf:"varint,1,opt,name=Type,proto3,enum=testdata.BuildingType" json:"Type,omitempty"`
	PosX                 int32            `protobuf:"varint,2,opt,name=PosX,proto3" json:"PosX,omitempty"`
	PosY                 int32            `protobuf:"varint,3,opt,name=PosY,proto3" json:"PosY,omitempty"`
	CityID               int32            `protobuf:"varint,5,opt,name=CityID,proto3" json:"CityID,omitempty"`
	ID                   int32            `protobuf:"varint,6,opt,name=ID,proto3" json:"ID,omitempty"`
	Action               *BuildActionInfo `protobuf:"bytes,8,opt,name=Action,proto3" json:"Action,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BuildReq) Reset()         { *m = BuildReq{} }
func (m *BuildReq) String() string { return proto.CompactTextString(m) }
func (*BuildReq) ProtoMessage()    {}
func (*BuildReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{3}
}
func (m *BuildReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildReq.Merge(m, src)
}
func (m *BuildReq) XXX_Size() int {
	return m.Size()
}
func (m *BuildReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildReq.DiscardUnknown(m)
}

var xxx_messageInfo_BuildReq proto.InternalMessageInfo

func (m *BuildReq) GetType() BuildingType {
	if m != nil {
		return m.Type
	}
	return BuildingType_Unknown
}

func (m *BuildReq) GetPosX() int32 {
	if m != nil {
		return m.PosX
	}
	return 0
}

func (m *BuildReq) GetPosY() int32 {
	if m != nil {
		return m.PosY
	}
	return 0
}

func (m *BuildReq) GetCityID() int32 {
	if m != nil {
		return m.CityID
	}
	return 0
}

func (m *BuildReq) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BuildReq) GetAction() *BuildActionInfo {
	if m != nil {
		return m.Action
	}
	return nil
}

type BuildAck struct {
	Code                 int32         `protobuf:"varint,1,opt,name=Code,proto3" json:"Code,omitempty"`
	Info                 *BuildingInfo `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BuildAck) Reset()         { *m = BuildAck{} }
func (m *BuildAck) String() string { return proto.CompactTextString(m) }
func (*BuildAck) ProtoMessage()    {}
func (*BuildAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b98c0ed33edeb52, []int{4}
}
func (m *BuildAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildAck.Merge(m, src)
}
func (m *BuildAck) XXX_Size() int {
	return m.Size()
}
func (m *BuildAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildAck.DiscardUnknown(m)
}

var xxx_messageInfo_BuildAck proto.InternalMessageInfo

func (m *BuildAck) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BuildAck) GetInfo() *BuildingInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func init() {
	proto.RegisterEnum("testdata.BuildingStatus", BuildingStatus_name, BuildingStatus_value)
	proto.RegisterEnum("testdata.BuildingType", BuildingType_name, BuildingType_value)
	proto.RegisterType((*Coord)(nil), "testdata.Coord")
	proto.RegisterType((*BuildingInfo)(nil), "testdata.BuildingInfo")
	proto.RegisterType((*BuildActionInfo)(nil), "testdata.BuildActionInfo")
	proto.RegisterType((*BuildReq)(nil), "testdata.BuildReq")
	proto.RegisterType((*BuildAck)(nil), "testdata.BuildAck")
}

func init() { proto.RegisterFile("testpb.proto", fileDescriptor_1b98c0ed33edeb52) }

var fileDescriptor_1b98c0ed33edeb52 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xdf, 0x8e, 0x12, 0x3f,
	0x14, 0xfe, 0x75, 0x18, 0x06, 0x38, 0xf0, 0x63, 0x9b, 0xc6, 0x6c, 0xaa, 0x31, 0xc4, 0xe0, 0x8d,
	0x92, 0x88, 0xba, 0x3e, 0x01, 0x7f, 0x62, 0x16, 0xa3, 0x66, 0x1d, 0xd9, 0x2c, 0x78, 0x57, 0x98,
	0x8a, 0x13, 0x86, 0x29, 0x96, 0xc2, 0x86, 0x07, 0xf2, 0x21, 0xf4, 0x09, 0xbc, 0xf4, 0x11, 0x0c,
	0x4f, 0x62, 0x7a, 0xa6, 0xc3, 0x44, 0xe5, 0xc2, 0xbb, 0xf3, 0x9d, 0xf3, 0xf5, 0x9c, 0xef, 0x7c,
	0x6d, 0xa1, 0x61, 0xe4, 0xc6, 0xac, 0x67, 0xdd, 0xb5, 0x56, 0x46, 0xb1, 0xaa, 0x45, 0x91, 0x30,
	0xa2, 0xfd, 0x10, 0xca, 0x03, 0xa5, 0x74, 0xc4, 0x1a, 0x40, 0x26, 0x9c, 0x3c, 0x20, 0x8f, 0xca,
	0x21, 0x99, 0x58, 0x34, 0xe5, 0x5e, 0x86, 0xa6, 0xed, 0x6f, 0x04, 0x1a, 0xfd, 0x6d, 0x9c, 0x44,
	0x71, 0xba, 0x18, 0xa5, 0x1f, 0x15, 0x6b, 0x82, 0x37, 0x8a, 0x1c, 0xdb, 0x1b, 0x45, 0xac, 0x03,
	0xfe, 0x78, 0xbf, 0x96, 0x78, 0xa2, 0x79, 0x71, 0xde, 0xcd, 0xdb, 0x77, 0xf3, 0x53, 0xb6, 0x1a,
	0x22, 0x87, 0x3d, 0x83, 0xe0, 0xbd, 0x11, 0x66, 0xbb, 0xe1, 0x25, 0x64, 0xf3, 0xbf, 0xd9, 0x59,
	0x3d, 0x74, 0x3c, 0x76, 0x07, 0xca, 0xaf, 0xe5, 0x4e, 0x26, 0xdc, 0xc7, 0x81, 0x19, 0x60, 0x0c,
	0xfc, 0x2b, 0xb5, 0x99, 0xf0, 0x32, 0x26, 0x31, 0x76, 0xb9, 0x29, 0xaf, 0x1c, 0x73, 0xd3, 0xf6,
	0x17, 0x02, 0x67, 0xd8, 0xb8, 0x37, 0x37, 0xb1, 0x4a, 0x51, 0xff, 0x7d, 0xa8, 0x61, 0x4a, 0xea,
	0xd1, 0xd0, 0xad, 0x51, 0x24, 0xd8, 0x3d, 0xa8, 0xbe, 0x51, 0x3b, 0x39, 0x8e, 0x57, 0xd9, 0x46,
	0xa5, 0xf0, 0x88, 0xd9, 0x63, 0xa8, 0xbc, 0xd4, 0x6a, 0x75, 0xa5, 0x32, 0xf9, 0xf5, 0x8b, 0xb3,
	0x42, 0x3e, 0x1a, 0x19, 0xe6, 0x75, 0xf6, 0x04, 0x6a, 0x63, 0xa1, 0x17, 0xd2, 0x58, 0xb2, 0x7f,
	0x9a, 0x5c, 0x30, 0xda, 0x5f, 0x09, 0x54, 0x51, 0x43, 0x28, 0x3f, 0x1f, 0x0d, 0x25, 0xff, 0x60,
	0x68, 0x6e, 0x84, 0x77, 0xc2, 0x88, 0x52, 0x61, 0x04, 0x3b, 0x87, 0x60, 0x10, 0x9b, 0xfd, 0x68,
	0xe8, 0x2c, 0x73, 0x08, 0x2f, 0x73, 0xc8, 0x03, 0x77, 0x99, 0x43, 0xf6, 0x1c, 0x82, 0xcc, 0x2a,
	0x5e, 0x45, 0xd1, 0x77, 0xff, 0x98, 0x5e, 0xf8, 0x18, 0x3a, 0x62, 0xfb, 0x95, 0x93, 0xde, 0x9b,
	0x2f, 0xed, 0xe8, 0x81, 0x8a, 0xa4, 0xb3, 0x15, 0x63, 0xbb, 0x8e, 0xe5, 0xa3, 0xc4, 0xfa, 0xa9,
	0x75, 0xb0, 0x1b, 0x72, 0x3a, 0x21, 0x34, 0x7f, 0x7f, 0x07, 0x0c, 0x20, 0xe8, 0x6b, 0xb5, 0x94,
	0x29, 0xfd, 0xcf, 0xc6, 0x6f, 0x95, 0x5e, 0x89, 0x84, 0x12, 0xd6, 0x70, 0x53, 0xe3, 0x74, 0x41,
	0x3d, 0xf6, 0x3f, 0xd4, 0xae, 0xd7, 0x0b, 0x2d, 0x10, 0x96, 0x58, 0x1d, 0x2a, 0xa1, 0x5c, 0xa9,
	0x9d, 0x8c, 0xa8, 0xdf, 0x99, 0x15, 0xef, 0x17, 0x2d, 0xab, 0x43, 0xe5, 0x3a, 0x5d, 0xa6, 0xea,
	0xd6, 0xb6, 0xa4, 0xd0, 0xb8, 0x94, 0x22, 0x7a, 0xb7, 0x15, 0xda, 0x48, 0xbd, 0xa1, 0xc4, 0x96,
	0x7b, 0x73, 0x11, 0xc9, 0xd5, 0x9e, 0x7a, 0xac, 0x0a, 0xfe, 0x8d, 0x48, 0x12, 0x5a, 0x62, 0x4d,
	0x80, 0x1b, 0x61, 0xe6, 0x9f, 0xc6, 0xea, 0x56, 0x6a, 0xea, 0xdb, 0xf9, 0x97, 0x6a, 0xb3, 0x8e,
	0x8d, 0x48, 0x68, 0xb9, 0xcf, 0xbf, 0x1f, 0x5a, 0xe4, 0xc7, 0xa1, 0x45, 0x7e, 0x1e, 0x5a, 0xe4,
	0x03, 0x74, 0x9f, 0xe6, 0x4b, 0xce, 0x02, 0xfc, 0x74, 0x2f, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x48, 0xc1, 0x21, 0x40, 0x84, 0x03, 0x00, 0x00,
}

func (m *Coord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Y != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x10
	}
	if m.X != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PosY != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.PosY))
		i--
		dAtA[i] = 0x38
	}
	if m.PosX != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.PosX))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildActionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildActionInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildActionInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TargetPos != nil {
		{
			size, err := m.TargetPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.FromPos != nil {
		{
			size, err := m.FromPos.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.MoveTime != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.MoveTime))
		i--
		dAtA[i] = 0x10
	}
	if m.BuilderID != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.BuilderID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.ID != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x30
	}
	if m.CityID != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.CityID))
		i--
		dAtA[i] = 0x28
	}
	if m.PosY != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.PosY))
		i--
		dAtA[i] = 0x18
	}
	if m.PosX != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.PosX))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTestpb(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintTestpb(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTestpb(dAtA []byte, offset int, v uint64) int {
	offset -= sovTestpb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Coord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 1 + sovTestpb(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTestpb(uint64(m.Y))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTestpb(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovTestpb(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovTestpb(uint64(m.Status))
	}
	if m.Level != 0 {
		n += 1 + sovTestpb(uint64(m.Level))
	}
	if m.PosX != 0 {
		n += 1 + sovTestpb(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovTestpb(uint64(m.PosY))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildActionInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BuilderID != 0 {
		n += 1 + sovTestpb(uint64(m.BuilderID))
	}
	if m.MoveTime != 0 {
		n += 1 + sovTestpb(uint64(m.MoveTime))
	}
	if m.FromPos != nil {
		l = m.FromPos.Size()
		n += 1 + l + sovTestpb(uint64(l))
	}
	if m.TargetPos != nil {
		l = m.TargetPos.Size()
		n += 1 + l + sovTestpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovTestpb(uint64(m.Type))
	}
	if m.PosX != 0 {
		n += 1 + sovTestpb(uint64(m.PosX))
	}
	if m.PosY != 0 {
		n += 1 + sovTestpb(uint64(m.PosY))
	}
	if m.CityID != 0 {
		n += 1 + sovTestpb(uint64(m.CityID))
	}
	if m.ID != 0 {
		n += 1 + sovTestpb(uint64(m.ID))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovTestpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuildAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTestpb(uint64(m.Code))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovTestpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTestpb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTestpb(x uint64) (n int) {
	return sovTestpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Coord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BuildingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= BuildingStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTestpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildActionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildActionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildActionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuilderID", wireType)
			}
			m.BuilderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuilderID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoveTime", wireType)
			}
			m.MoveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MoveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromPos == nil {
				m.FromPos = &Coord{}
			}
			if err := m.FromPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetPos == nil {
				m.TargetPos = &Coord{}
			}
			if err := m.TargetPos.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BuildingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosX", wireType)
			}
			m.PosX = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosX |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PosY", wireType)
			}
			m.PosY = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PosY |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityID", wireType)
			}
			m.CityID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &BuildActionInfo{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTestpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTestpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTestpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &BuildingInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTestpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTestpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTestpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTestpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTestpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTestpb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTestpb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTestpb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTestpb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTestpb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTestpb = fmt.Errorf("proto: unexpected end of group")
)
